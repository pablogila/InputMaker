# Deprecated at v4.3.6:

def find_old(keyword:str, file:str, number_of_matches:int=0, additional_lines:int=0, split_additional_lines:bool=False) -> list:
    '''
    Finds the line(s) containing the `keyword` string in the given `file`,
    returning a list with the matches.\n
    The value `number_of_matches` specifies the max number of matches to be returned.
    Defaults to 0 to return all possible matches. Set it to 1 to return only one match,
    or to negative integers to start the search from the end of the file upwards.\n
    The value `additional_lines` specifies the number of additional lines
    below the target line that are also returned;
    2 to return the found line plus two additional lines below, etc.
    Negative values return the specified number of lines before the target line.
    The original ordering from the file is preserved.
    Defaults to `additional_lines=0`, only returning the target line.
    By default, the additional lines are returned in the same list item as the match separated by a `\\n`,
    unless `split_additional_lines=True`, in which case they are added as additional items in the list.
    '''
    file_path = get(file)
    matches = []
    # Counter to track the number of matches. If number_of_matches=0, counter remains 0.
    counter = 0
    counter_stop = abs(number_of_matches)
    with open(file_path, 'r+b') as f:
        mm = mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_READ)
        if number_of_matches > 0:
            start = 0
        elif number_of_matches < 0:
            start = len(mm) - 1
        else: # Find all matches
            start = 0
            counter_stop = 1
        while counter < counter_stop:
            if number_of_matches >= 0:
                start = mm.find(keyword.encode(), start, len(mm)-1)
            else:
                start = mm.rfind(keyword.encode(), 0, start)
            if start == -1:
                break
            # Get the positions of the full line containing the match
            line_start = mm.rfind(b'\n', 0, start) +1
            line_end = mm.find(b'\n', start, len(mm)-1)
            # Get the additional lines
            match_start = line_start
            match_end = line_end
            if match_start == -1:
                match_start = 0
            if match_end == -1:
                match_end = len(mm)-1
            if additional_lines > 0:
                for _ in range(abs(additional_lines)):
                    match_end = mm.find(b'\n', match_end+1, len(mm)-1)
                    if match_end == -1:
                        break
            elif additional_lines < 0:
                for _ in range(abs(additional_lines)):
                    match_start = mm.rfind(b'\n', 0, match_start-1) +1
                    if match_start == -1:
                        break
            # Save the matched lines in a list
            matches.append(mm[match_start:match_end].decode())
            # Stop or keep searching
            if number_of_matches > 0:
                start = match_end + 1
                counter += 1
            elif number_of_matches < 0:
                start = match_start - 1
                counter += 1
            elif number_of_matches == 0:
                start += 1
    if split_additional_lines:
        splitted_matches = []
        for string in matches:
            splitted_match = string.splitlines()
            splitted_matches.extend(splitted_match)
        matches = splitted_matches
    return matches



# Deprecated at v0.3.0
def get_file_with_extension(folder, extensions, preference=None):
    '''
    Returns the file with one of the the specified `extensions`
    (string or list with strings) in the given `folder`.
    If there is more than one file with the extension,
    it returns the one containing the `preference` string.
    '''
    files = get_files_from_folder(folder, extensions)
    if files is None:
        return None
    if len(files) > 1:
        for file in files:
            if preference in file:
                return file
        raise ValueError(folder + ' contains too many ' + extensions + ' files')
        #print("  ERROR: " + folder + " contains too many " + extensions + " files, skipping...")
    return files[0]

# README deprecated at v1.0.0


> Everything below is deprecated, as the script 
> is now a regular python package. It will be 
> removed in future versions.
You can also run the script with python 
(Windows), or python3 (Linux), with a flag to 
specify the kind of input, currently supporting 
CP2K and CASTEP. To mass-create `*.cell` [CASTEP 
inputs](#castep-inputs), as well as 
simultaneously creating a supercell, e.g. of 
3x2x3 size, run the following: ```bash python3 
inputmaker.py -castep -supercell=[3,2,3] ``` To 
create [CP2K inputs](#cp2k-inputs), the file 
structure should have been previously 
configured, as described in the section [File 
structure](#file-structure). Then run: ```bash 
python3 inputmaker.py -cp2k ```
### CASTEP inputs

CASTEP `*.cell` files can be mass-produced by 
running the script with the `-castep` flag. The 
script will then search for all `*.cif` files on 
the current path; if none are found, then it 
will check each subfolder. The script will also 
create a supercell, if the `-supercell=[k,l,m]` 
flag is provided, replacing `k`, `l`, and `m` 
with the desired supercell size (e.g. [3,2,3], 
etc). The outputs are placed in the same folder 
as the `*.cif` files, unless the `-out` flag is 
used, in which case the outputs are placed in a 
`/out/` folder. To create the `*.cell` files: 
```bash python3 inputmaker.py -castep 
-supercell=[k,l,m] -out ```
### CP2K inputs
The template for CP2K inputs should contain 
several keywords, where the text will be 
replaced. For instance, you need a keyword just 
before the ABC rows of the `&CELL` section, 
which will be replaced by the updated cells. 
This keyword should be specified on the 
`key_cell` variable of the `cp2k()` function. An 
example of a cell section of a template file: 
```CP2K &SUBSYS
    &CELL
!<keyword-cell>
        A 1.000000000000000 0.000000000000000 
        0.000000000000000 B 0.000000000000000 
        1.000000000000000 0.000000000000000 C 
        0.000000000000000 0.000000000000000 
        1.000000000000000
        ! Line reserved for debugging, 
        ! immediatly under cell parameters. DO 
        ! NOT WRITE HERE.
        !!! Make sure that the following 
        !!! parameters are correct! input-maker 
        !!! does not check them.
        PERIODIC XYZ MULTIPLE_UNIT_CELL 1 1 1 
    &END CELL
```

The keys are defined on the `cp2k()` function, 
as follows: Notice that for CP2K inputs, a PDB 
and a PSF file are required. The PDB file is 
used to get the coordinates, and the PSF file is 
used to get the topology. Both files are 
detected automatically; however, in case the PSF 
file is not found, the script can create an 
initial input file so that CP2K can quickly 
generate it. After that, run again inputmaker 
and CP2K for a second time, now with the PSF 
file available. The keywords for the topology 
section are then used to place the coordinates 
and the topology in the correct places, as 
follows: ```CP2K
!!!  ONLY RUN 1st TIME (without PSF file) !!!
!<keyword-topology-init>
    &COORD SCALED .TRUE.
!<keyword-coordinates>
    &END COORD &TOPOLOGY &generate bondparm 
            covalent BONDLENGTH_MAX 3.5 
            bondparm_factor 1.0 create_molecules 
            .true.
        &end generate &CENTER_COORDINATES &END 
        CENTER_COORDINATES CONNECTIVITY GENERATE 
        &DUMP_PDB &END &DUMP_PSF &END
!!!  RUN 2nd time, ONCE YOU HAVE PDB & PSF FILES 
!!!  !!!
!<keyword-topology-run>
    &TOPOLOGY COORD_FILE_FORMAT PDB
!<keyword-pdb-filename>
        COORD_FILE_NAME ./dumped.pdb 
        CONNECTIVITY psf
!<keyword-psf-filename>
        CONN_FILE_NAME ./dumped.psf
!<keyword-topology-end>
    &END TOPOLOGY ```

### File structure
Download `inputmaker.py` and place it near the 
input template file, in this case, a CP2K input. 
There should be subfolders with the structural 
files to create the inputs. The file structure 
should look like this: ``` root_folder │ ├── 
inputmaker.py ├── sbatch_all.sh ├── 
custom_input.inp.template ├── 
custom_slurm.sh.template │ ├── job_folder_1 │ 
├── structural_file_1.pdb │ ├── 
structural_file_1.psf │ └── ... ├── job_folder_2 
│ ├── structural_file_2.pdb │ └── ... └── ... 
```
#### Optional: Reusing old CP2K inputs
You can also reuse old `*.inp` files, by 
changing the extension to `.inp.old`. It will 
then copy to the template just the ABC rows from 
the &CELL section, after the keyword.
### Sbatch'ing slurm files
If there is only one `*.sh` slurm file per 
folder, you can sbatch' all inputs with the 
command: ```bash source sbatch_all.sh ```

