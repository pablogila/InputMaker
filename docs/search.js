window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "thoth", "modulename": "thoth", "kind": "module", "doc": "<h1 id=\"thoth-v432\">Thoth v4.3.2</h1>\n\n<p>Welcome to <strong>T</strong>he <strong>H</strong>elpful &amp; <strong>O</strong>ptimized <strong>T</strong>ext <strong>H</strong>elper; or just <strong>Thoth</strong>, as the Egyptian god of writing, wisdom and magic.  </p>\n\n<p>This Python3 package allows you to create, edit and analyze all kinds of text files, with a special focus on ab-initio calculations. Formally known as InputMaker.  </p>\n\n<p>Just as the Egyptian god, Thoth is <em>married</em> with <a href=\"https://github.com/pablogila/Maat\">Maat</a>, another super useful python package to analyze data from your experiments. Although Maat is not required to run Thoth, it is super useful anyway, so check it out.  </p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Thoth is installed as a regular Python package.\nAs always, it is recommended to install it in a virtual environment:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>venv<span class=\"w\"> </span>.venv\n<span class=\"nb\">source</span><span class=\"w\"> </span>.venv/bin/activate\n</code></pre>\n</div>\n\n<p>Then, clone the repository from <a href=\"https://github.com/pablogila/Thoth/\">GitHub</a> or download it as a ZIP and run inside the <code>/Thoth/</code> directory:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>Documentation is available locally on the <code>docs/thoth.html</code> folder.\nAn <a href=\"https://pablogila.github.io/InputMaker/\">online documentation</a> is also available.</p>\n\n<p>This package contains the following submodules:</p>\n\n<ul>\n<li><code>thoth.file</code>. Manipulate files.</li>\n<li><code>thoth.text</code>. Read and manipulate text.</li>\n<li><code>thoth.extract</code>. Extract data from raw text strings.</li>\n<li><code>thoth.alias</code>. Common dictionaries to normalise user inputs.</li>\n<li><code>thoth.call</code>. Run bash scripts and related.</li>\n</ul>\n\n<p>Additionally, some specific modules for use in tandem with ab-initio codes are included:</p>\n\n<ul>\n<li><code>thoth.qe</code>. Specific module for Quantum ESPRESSO.</li>\n</ul>\n\n<p>The documentation can be compiled automatically using <a href=\"https://pdoc.dev/\">pdoc</a> and Thoth itself, by running:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>pdoc.py\n</code></pre>\n</div>\n\n<h2 id=\"license\">License</h2>\n\n<blockquote>\n  <p>TL;DR: Do what you want with this, as long as you share the source code of your modifications, also under GNU AGPLv3.  </p>\n</blockquote>\n\n<p>Copyright (C) 2024  Pablo Gila-Herranz<br />\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.<br />\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the attached GNU Affero General Public License for more details.  </p>\n\n<p>any later version.<br />\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the attached GNU Affero General Public License for more details.  </p>\n"}, {"fullname": "thoth.version", "modulename": "thoth", "qualname": "version", "kind": "variable", "doc": "<p>Package version, using semantic versioning to indicate breaking changes,\nas in v<MAJOR>.<MINOR>.<PATCH>.</p>\n", "default_value": "&#x27;v4.3.2&#x27;"}, {"fullname": "thoth.alias", "modulename": "thoth.alias", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Common dictionaries to normalise user inputs.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>file</code></li>\n<li><code>boolean</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "thoth.alias.file", "modulename": "thoth.alias", "qualname": "file", "kind": "variable", "doc": "<p>Strings related to files, to normalise user inputs.</p>\n", "default_value": "{&#x27;file&#x27;: [&#x27;file&#x27;, &#x27;files&#x27;, &#x27;File&#x27;, &#x27;Files&#x27;, &#x27;FILE&#x27;, &#x27;FILES&#x27;, &#x27;f&#x27;, &#x27;F&#x27;], &#x27;dir&#x27;: [&#x27;dir&#x27;, &#x27;Dir&#x27;, &#x27;DIR&#x27;, &#x27;directory&#x27;, &#x27;Directory&#x27;, &#x27;DIRECTORY&#x27;, &#x27;d&#x27;, &#x27;D&#x27;, &#x27;folder&#x27;, &#x27;Folder&#x27;, &#x27;FOLDER&#x27;], &#x27;Error&#x27;: [&#x27;Error&#x27;, &#x27;error&#x27;, &#x27;ERROR&#x27;, &#x27;Errors&#x27;, &#x27;errors&#x27;, &#x27;ERRORS&#x27;]}"}, {"fullname": "thoth.alias.boolean", "modulename": "thoth.alias", "qualname": "boolean", "kind": "variable", "doc": "<p>Strings with booleans such as 'yes' / 'no', to correct user inputs.</p>\n", "default_value": "{True: [&#x27;yes&#x27;, &#x27;YES&#x27;, &#x27;Yes&#x27;, &#x27;Y&#x27;, &#x27;y&#x27;, &#x27;T&#x27;, &#x27;True&#x27;, &#x27;TRUE&#x27;, &#x27;t&#x27;, &#x27;true&#x27;, True, &#x27;Si&#x27;, &#x27;SI&#x27;, &#x27;si&#x27;, &#x27;S&#x27;, &#x27;s&#x27;], False: [&#x27;no&#x27;, &#x27;NO&#x27;, &#x27;No&#x27;, &#x27;N&#x27;, &#x27;n&#x27;, &#x27;F&#x27;, &#x27;False&#x27;, &#x27;FALSE&#x27;, &#x27;f&#x27;, &#x27;false&#x27;, False]}"}, {"fullname": "thoth.call", "modulename": "thoth.call", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to simplify calling bash scripts and related.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>shell()</code></li>\n<li><code>git()</code></li>\n<li><code>here()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "thoth.call.shell", "modulename": "thoth.call", "qualname": "shell", "kind": "function", "doc": "<p>Run a shell <code>command</code>, inside an optional <code>cwd</code> directory.\nIf empty, the current working directory will be used.\nReturns the result of the command used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span>, </span><span class=\"param\"><span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "thoth.call.git", "modulename": "thoth.call", "qualname": "git", "kind": "function", "doc": "<p>Update</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.call.here", "modulename": "thoth.call", "qualname": "here", "kind": "function", "doc": "<p>Returns the directory where the current script lies.\nBy default, it also runs the rest of the script from said directory;\nThis is really useful to run scripts from the VSCode terminal, etc.\nYou might want to override this behaviour if you just want to know the path of the current script;\nto do so, set <code>run_here=False</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_here</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "thoth.extract", "modulename": "thoth.extract", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to extract data from raw text strings.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>number()</code></li>\n<li><code>string()</code></li>\n<li><code>column()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "thoth.extract.number", "modulename": "thoth.extract", "qualname": "number", "kind": "function", "doc": "<p>Extracts the float value of a given <code>name</code> variable from a raw <code>text</code>.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;energy =   500.0 Ry&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thoth</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">&#39;energy&#39;</span><span class=\"p\">)</span>\n<span class=\"mf\">500.0</span>  <span class=\"c1\"># float output</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.extract.string", "modulename": "thoth.extract", "qualname": "string", "kind": "function", "doc": "<p>Extracts the <code>text</code> value of a given <code>name</code> variable from a raw string.\nStops before an optional <code>stop</code> string.\nIf <code>strip=True</code>, removes leading and trailing commas.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;energy =   500.0 Ry were calculated&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">thoth</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">&#39;energy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;were&#39;</span><span class=\"p\">)</span>\n<span class=\"s1\">&#39;500.0 Ry&#39;</span>  <span class=\"c1\"># String output</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">strip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.extract.column", "modulename": "thoth.extract", "qualname": "column", "kind": "function", "doc": "<p>Extracts the desired float <code>column</code> of a given <code>string</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file", "modulename": "thoth.file", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to manipulate files.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>get()</code></li>\n<li><code>get_list()</code></li>\n<li><code>copy()</code></li>\n<li><code>move()</code></li>\n<li><code>remove()</code></li>\n<li><code>rename()</code></li>\n<li><code>rename_on_subfolders()</code></li>\n<li><code>copy_to_subfolders()</code></li>\n<li><code>from_template()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "thoth.file.get", "modulename": "thoth.file", "qualname": "get", "kind": "function", "doc": "<p>Check if the given <code>file</code> exists in the currrent working directory\nor in the full path, and returns its full path as a string.</p>\n\n<p>If the provided string is a directory, it checks the files inside it.\nif there is only one file inside, it returns said file;\nif there are more files, it tries to filter them with the <code>filters</code> keyword(s) to return a single file.\nIf this fails, try using more strict filers to return a single file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.get_list", "modulename": "thoth.file", "qualname": "get_list", "kind": "function", "doc": "<p>Takes a <code>folder</code>, filters the content with the <code>filters</code> keyword(s) if provided, and returns a list with the matches.\nThe full paths are returned by default; to get only the base names, set <code>abspath=False</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">abspath</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.copy", "modulename": "thoth.file", "qualname": "copy", "kind": "function", "doc": "<p>Copies the content of <code>original_file</code> to <code>new_file</code> with shutil,\nafter making sure that the file exists with <code>thoth.file.get()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">original_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.move", "modulename": "thoth.file", "qualname": "move", "kind": "function", "doc": "<p>Moves <code>original_file</code> to <code>new_file</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">original_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.remove", "modulename": "thoth.file", "qualname": "remove", "kind": "function", "doc": "<p>Removes the given <code>file</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.rename", "modulename": "thoth.file", "qualname": "rename", "kind": "function", "doc": "<p>Batch renames files in the given folder, replacing <code>old_string</code> by <code>new_string</code>.\nIf no <code>folder</code> is provided, the current working directory is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.rename_on_subfolders", "modulename": "thoth.file", "qualname": "rename_on_subfolders", "kind": "function", "doc": "<p>Renames the files inside the subfolders in the given <code>folder</code>,\nfrom an <code>old_string</code> to the <code>new_string</code>.\nIf no <code>folder</code> is provided, the current working directory is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.copy_to_subfolders", "modulename": "thoth.file", "qualname": "copy_to_subfolders", "kind": "function", "doc": "<p>Copies the files from the <code>folder</code> with the given <code>extension</code> to individual subfolders.\nThe subfolders are named as the original files,\nremoving the strings from the <code>strings_to_delete</code> list.\nIf no <code>folder</code> is provided, it runs in the current working directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">strings_to_delete</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.file.from_template", "modulename": "thoth.file", "qualname": "from_template", "kind": "function", "doc": "<p>Same as <code>copy_file</code>, but optionally adds a <code>comment</code> at the beginning of the new file.\nAlso, it optionally corrects the output file with a <code>fixing_dict</code> dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">new_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fixing_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.qe", "modulename": "thoth.qe", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to work with <a href=\"https://www.quantum-espresso.org/\">Quantum ESPRESSO</a> calculation files.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>read_in()</code></li>\n<li><code>read_out()</code></li>\n<li><code>read_dir()</code></li>\n<li><code>read_dirs()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "thoth.qe.read_in", "modulename": "thoth.qe", "qualname": "read_in", "kind": "function", "doc": "<p>Reads an input <code>file</code> from Quantum ESPRESSO,\nreturning a Pandas DataFrame with the input values used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "thoth.qe.read_out", "modulename": "thoth.qe", "qualname": "read_out", "kind": "function", "doc": "<p>Reads an output <code>file</code> from Quantum ESPRESSO,\nreturning a Pandas DataFrame with the following columns:\n<code>'Energy'</code>, <code>'Total force'</code>, <code>'Total SCF correction'</code>, <code>'Runtime'</code>, <code>'JOB DONE'</code>, <code>'BFGS converged'</code>, <code>'BFGS failed'</code>, <code>'Maxiter reached'</code>, <code>'Error'</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.qe.read_dir", "modulename": "thoth.qe", "qualname": "read_dir", "kind": "function", "doc": "<p>Takes a <code>folder</code> containing a Quantum ESPRESSO calculation,\nand returns a Pandas DataFrame containing the input parameters and output results.\nInput and output files are determined automatically,\nbut must be specified with <code>input_str</code> and <code>output_str</code> if more than one file ends with <code>.in</code> or <code>.out</code>.\nTo extract values only from the input or only from the output, check <code>read_in</code> and <code>read_out</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span>, </span><span class=\"param\"><span class=\"n\">input_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.in&#39;</span>, </span><span class=\"param\"><span class=\"n\">output_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.out&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "thoth.qe.read_dirs", "modulename": "thoth.qe", "qualname": "read_dirs", "kind": "function", "doc": "<p>Calls recursively <code>thoth.qe.read_dir</code>, reading Quantum ESPRESSO calculations\nfrom all the subfolders inside the given <code>directory</code>.\nInput and output files are determined automatically, but must be specified with\n<code>input_str</code> and <code>output_str</code> if more than one file ends with <code>.in</code> or <code>.out</code>.</p>\n\n<p>To properly group the calculations per type, you can modify\n<code>calc_splitter</code> ('_' by default), <code>calc_type_index</code> (0) and <code>calc_id_index</code> (1).\nWith these default values, a subfolder named 'CalculationType_CalculationID_AdditionalText'\nwill be interpreted as follows:</p>\n\n<ul>\n<li>Calculation type: 'CalculationType'</li>\n<li>CalculationID: 'CalculationID'</li>\n</ul>\n\n<p>If everything fails, the subfolder name will be used.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span>,</span><span class=\"param\">\t<span class=\"n\">input_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.in&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.out&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calc_splitter</span><span class=\"o\">=</span><span class=\"s1\">&#39;_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calc_type_index</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">calc_id_index</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "thoth.text", "modulename": "thoth.text", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to read and manipulate text.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>find()</code></li>\n<li><code>replace()</code></li>\n<li><code>replace_line()</code></li>\n<li><code>insert_under()</code></li>\n<li><code>replace_under()</code></li>\n<li><code>delete_under()</code></li>\n<li><code>replace_between()</code></li>\n<li><code>delete_between()</code></li>\n<li><code>correct_with_dict()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "thoth.text.find", "modulename": "thoth.text", "qualname": "find", "kind": "function", "doc": "<p>Finds the line(s) containing the <code>keyword</code> string in the given <code>file</code>.\nRegular expressions can be used.</p>\n\n<p>The value <code>number_of_matches</code> specifies the max number of matches to be returned.\nDefaults to 0 to return all possible matches. Set it to 1 to return only one match,\nor to negative integers to start the search from the end of the file upwards.</p>\n\n<p>The value <code>additional_lines</code> specifies the number of additional lines\nbelow the target line that are also returned;\n2 to return the found line plus two additional lines below, etc.\nNegative values return the specified number of lines before the target line.\nThe original ordering from the file is preserved.\nDefaults to <code>additional_lines=0</code>, only returning the target line.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_matches</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">additional_lines</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">split_additional_lines</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.replace", "modulename": "thoth.text", "qualname": "replace", "kind": "function", "doc": "<p>Replaces the <code>keyword</code> string with the <code>text</code> string in the given <code>filename</code>.\nThe value <code>number_of_replacements</code> specifies the number of replacements to perform:\n1 to replace only the first keyword found, 2, 3...\nUse negative values to replace from the end of the file,\neg. to replace the last found key, use <code>number_of_replacements = -1</code>.\nTo replace all values, set <code>number_of_replacements = 0</code>, which is the value by default.</p>\n\n<pre><code>line... keyword ...line -&gt; line... text ...line\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_replacements</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.replace_line", "modulename": "thoth.text", "qualname": "replace_line", "kind": "function", "doc": "<p>Replaces the entire line containing the <code>keyword</code> string with the <code>text</code> string in the given <code>filename</code>.\nThe value <code>number_of_replacements</code> specifies the number of lines to replace:\n1 to replace only the first line with the keyword, 2, 3...\nUse negative values to replace from the end of the file,\ne.g., to replace only the last line containing the keyword, use <code>number_of_replacements = -1</code>.\nTo replace all lines, set <code>number_of_replacements = 0</code>, which is the value by default.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_replacements</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.insert_under", "modulename": "thoth.text", "qualname": "insert_under", "kind": "function", "doc": "<p>Inserts the given <code>text</code> string under the first occurrence\nof the <code>keyword</code> in the given <code>file</code>.\nThe keyword can be at any position within the line.\nIf <code>only_first=True</code>, it will only work\nat the first instance of the keyword, ignoring the rest.\nThe keyword can be at any position in the line, not just at the beginning.</p>\n\n<pre><code>line1\nkeyword line2\ntext\nline3\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">only_first</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.replace_under", "modulename": "thoth.text", "qualname": "replace_under", "kind": "function", "doc": "<p>Replaces the lines under the first occurrence of the <code>keyword</code>\nin the given <code>filename</code> with the given <code>text</code> string.</p>\n\n<blockquote>\n  <p>TODO: IN THE FUTURE SHOULD BE POSITION-AGNOSTIC. The keyword currently must be at the beginning of the line.</p>\n</blockquote>\n\n<pre><code>line1\nkeyword line2\ntext\nline4\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.delete_under", "modulename": "thoth.text", "qualname": "delete_under", "kind": "function", "doc": "<p>Deletes the lines under the first occurrence of the <code>keyword</code> in the given <code>file</code>.</p>\n\n<blockquote>\n  <p>TODO: IN THE FUTURE SHOULD BE POSITION-AGNOSTIC</p>\n</blockquote>\n\n<pre><code>lines...\nkeyword\n(end of file)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.replace_between", "modulename": "thoth.text", "qualname": "replace_between", "kind": "function", "doc": "<p>Replace lines with a given <code>text</code>, between the keywords <code>key1</code> and <code>key2</code>,\nin a given <code>file</code>.</p>\n\n<pre><code>lines...\nkey1\ntext\nkey2\nlines...\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.delete_between", "modulename": "thoth.text", "qualname": "delete_between", "kind": "function", "doc": "<p>Deletes the lines between two keywords in a given <code>file</code>.</p>\n\n<pre><code>lines...\nkey1\n(lines to be deleted)\nkey2\nlines...\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "thoth.text.correct_with_dict", "modulename": "thoth.text", "qualname": "correct_with_dict", "kind": "function", "doc": "<p>Corrects the given text <code>file</code> using the <code>fixing_dict</code> dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fixing_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();