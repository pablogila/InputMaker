window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "inputmaker", "modulename": "inputmaker", "kind": "module", "doc": "<h1 id=\"inputmaker-v070\">InputMaker v0.7.0</h1>\n\n<p>Make all kind of inputs from a template file, thanks to a rich set of built-in functions.<br />\nCurrently supports CP2K inputs, but can be easily extended to other packages.  </p>\n\n<h3 id=\"dependencies\">Dependencies</h3>\n\n<ul>\n<li>Python 3.X  </li>\n<li>ASE package (for CP2K inputs). To install it, run <code>pip install ase</code>.  </li>\n<li>cif2cell package (for CASTEP inputs). To install it, run <code>pip install cif2cell</code>. Warning: cif2cell may not work in Windows.  </li>\n</ul>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>As always, it is recommended to install this package it in a virtual environment:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>-m<span class=\"w\"> </span>venv<span class=\"w\"> </span>.venv\n<span class=\"nb\">source</span><span class=\"w\"> </span>.venv/bin/activate\n</code></pre>\n</div>\n\n<p>Then, install the package with pip:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<p>After installation, you can run InputMaker as a regular python package.\nMost common tools are available to be called directly.\nFor example, to rename files with a specific extension in all subfolders:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">inputmaker</span> <span class=\"k\">as</span> <span class=\"nn\">im</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">rename_files_on_subfolders</span><span class=\"p\">(</span><span class=\"s1\">&#39;.psf_&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;.psf&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>Documentation is available locally on the <code>docs/inputmaker.html</code> folder.\nAn <a href=\"https://pablogila.github.io/InputMaker/\">online documentation</a> is also available.</p>\n\n<hr />\n\n<h2 id=\"deprecated\">Deprecated</h2>\n\n<blockquote>\n  <p>Everything below is deprecated, as the script is now a regular python package. It will be removed in future versions.  </p>\n</blockquote>\n\n<p>You can also run the script with python (Windows), or python3 (Linux), with a flag to specify the kind of input, currently supporting CP2K and CASTEP.  </p>\n\n<p>To mass-create <code>*.cell</code> <a href=\"#castep-inputs\">CASTEP inputs</a>, as well as simultaneously creating a supercell, e.g. of 3x2x3 size, run the following:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>inputmaker.py<span class=\"w\"> </span>-castep<span class=\"w\"> </span>-supercell<span class=\"o\">=[</span><span class=\"m\">3</span>,2,3<span class=\"o\">]</span>\n</code></pre>\n</div>\n\n<p>To create <a href=\"#cp2k-inputs\">CP2K inputs</a>, the file structure should have been previously configured, as described in the section <a href=\"#file-structure\">File structure</a>. Then run:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>inputmaker.py<span class=\"w\"> </span>-cp2k\n</code></pre>\n</div>\n\n<h3 id=\"castep-inputs\">CASTEP inputs</h3>\n\n<p>CASTEP <code>*.cell</code> files can be mass-produced by running the script with the <code>-castep</code> flag. The script will then search for all <code>*.cif</code> files on the current path; if none are found, then it will check each subfolder.<br />\nThe script will also create a supercell, if the <code>-supercell=[k,l,m]</code> flag is provided, replacing <code>k</code>, <code>l</code>, and <code>m</code> with the desired supercell size (e.g. [3,2,3], etc).<br />\nThe outputs are placed in the same folder as the <code>*.cif</code> files, unless the <code>-out</code> flag is used, in which case the outputs are placed in a <code>/out/</code> folder.  </p>\n\n<p>To create the <code>*.cell</code> files:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>inputmaker.py<span class=\"w\"> </span>-castep<span class=\"w\"> </span>-supercell<span class=\"o\">=[</span>k,l,m<span class=\"o\">]</span><span class=\"w\"> </span>-out\n</code></pre>\n</div>\n\n<h3 id=\"cp2k-inputs\">CP2K inputs</h3>\n\n<p>The template for CP2K inputs should contain several keywords, where the text will be replaced. For instance, you need a keyword just before the ABC rows of the <code>&amp;CELL</code> section, which will be replaced by the updated cells. This keyword should be specified on the <code>key_cell</code> variable of the <code>cp2k()</code> function.<br />\nAn example of a cell section of a template file:  </p>\n\n<pre><code>&amp;SUBSYS\n    &amp;CELL\n!&lt;keyword-cell&gt;\n        A 1.000000000000000       0.000000000000000       0.000000000000000\n        B 0.000000000000000       1.000000000000000       0.000000000000000\n        C 0.000000000000000       0.000000000000000       1.000000000000000\n        ! Line reserved for debugging, immediatly under cell parameters. DO NOT WRITE HERE.\n\n        !!! Make sure that the following parameters are correct! input-maker does not check them.\n        PERIODIC XYZ\n        MULTIPLE_UNIT_CELL 1 1 1\n    &amp;END CELL\n</code></pre>\n\n<p>The keys are defined on the <code>cp2k()</code> function, as follows:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Template files, must be in the same folder as this script:</span>\n<span class=\"n\">inp_template_extension</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.inp.template&#39;</span> <span class=\"c1\"># CP2K input template</span>\n<span class=\"n\">slurm_template_extension</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.sh.template&#39;</span> <span class=\"c1\"># Slurm file template</span>\n<span class=\"c1\"># Keywords on the inp template file:</span>\n<span class=\"n\">key_cell</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-cell&gt;&#39;</span> <span class=\"c1\"># Right above the ABC rows of the &amp;CELL section</span>\n<span class=\"n\">key_coordinates</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-coordinates&gt;&#39;</span> <span class=\"c1\"># On the &amp;COORD section </span>\n<span class=\"n\">key_topology_init</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-topology-init&gt;&#39;</span> \n<span class=\"n\">key_topology_run</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-topology-run&gt;&#39;</span>\n<span class=\"n\">key_topology_end</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-topology-end&gt;&#39;</span>\n<span class=\"n\">key_pdb_filename</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-pdb-filename&gt;&#39;</span> <span class=\"c1\"># &#39;        COORD_FILE_NAME ./dumped.pdb&#39;</span>\n<span class=\"n\">key_psf_filename</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-psf-filename&gt;&#39;</span> <span class=\"c1\"># &#39;        CONN_FILE_NAME ./dumped.psf&#39;</span>\n<span class=\"n\">key_steps</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&lt;keyword-steps&gt;&#39;</span> <span class=\"c1\"># Before the number of steps</span>\n<span class=\"c1\"># Keywords on the slurm template file:</span>\n<span class=\"n\">key_jobname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;keyword-JOBNAME&gt;&#39;</span>\n<span class=\"n\">key_filename</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;keyword-FILENAME&gt;&#39;</span>\n</code></pre>\n</div>\n\n<p>Notice that for CP2K inputs, a PDB and a PSF file are required. The PDB file is used to get the coordinates, and the PSF file is used to get the topology. Both files are detected automatically; however, in case the PSF file is not found, the script can create an initial input file so that CP2K can quickly generate it. After that, run again inputmaker and CP2K for a second time, now with the PSF file available. The keywords for the topology section are then used to place the coordinates and the topology in the correct places, as follows:  </p>\n\n<pre><code>!!!  ONLY RUN 1st TIME (without PSF file)  !!!\n!&lt;keyword-topology-init&gt;\n    &amp;COORD\n        SCALED .TRUE.\n!&lt;keyword-coordinates&gt;\n    &amp;END COORD   \n    &amp;TOPOLOGY\n        &amp;generate\n            bondparm covalent \n            BONDLENGTH_MAX 3.5\n            bondparm_factor 1.0\n            create_molecules .true.\n        &amp;end generate\n        &amp;CENTER_COORDINATES\n        &amp;END CENTER_COORDINATES\n        CONNECTIVITY GENERATE\n        &amp;DUMP_PDB\n        &amp;END\n        &amp;DUMP_PSF\n        &amp;END\n!!!  RUN 2nd time, ONCE YOU HAVE PDB &amp; PSF FILES  !!!\n!&lt;keyword-topology-run&gt;\n    &amp;TOPOLOGY\n        COORD_FILE_FORMAT PDB\n!&lt;keyword-pdb-filename&gt;\n        COORD_FILE_NAME ./dumped.pdb\n        CONNECTIVITY psf\n!&lt;keyword-psf-filename&gt;\n        CONN_FILE_NAME ./dumped.psf\n!&lt;keyword-topology-end&gt;\n    &amp;END TOPOLOGY\n</code></pre>\n\n<h3 id=\"file-structure\">File structure</h3>\n\n<p>Download <code>inputmaker.py</code> and place it near the input template file, in this case, a CP2K input. There should be subfolders with the structural files to create the inputs. The file structure should look like this:  </p>\n\n<pre><code>root_folder\n\u2502\n\u251c\u2500\u2500 inputmaker.py\n\u251c\u2500\u2500 sbatch_all.sh\n\u251c\u2500\u2500 custom_input.inp.template\n\u251c\u2500\u2500 custom_slurm.sh.template\n\u2502\n\u251c\u2500\u2500 job_folder_1\n\u2502   \u251c\u2500\u2500 structural_file_1.pdb\n\u2502   \u251c\u2500\u2500 structural_file_1.psf\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 job_folder_2\n\u2502   \u251c\u2500\u2500 structural_file_2.pdb\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre>\n\n<h4 id=\"optional-reusing-old-cp2k-inputs\">Optional: Reusing old CP2K inputs</h4>\n\n<p>You can also reuse old <code>*.inp</code> files, by changing the extension to <code>.inp.old</code>. It will then copy to the template just the ABC rows from the &amp;CELL section, after the keyword.  </p>\n\n<h3 id=\"sbatching-slurm-files\">Sbatch'ing slurm files</h3>\n\n<p>If there is only one <code>*.sh</code> slurm file per folder, you can sbatch' all inputs with the command:  </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nb\">source</span><span class=\"w\"> </span>sbatch_all.sh\n</code></pre>\n</div>\n"}, {"fullname": "inputmaker.call", "modulename": "inputmaker.call", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Functions to simplify calling bash scripts and related.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>shell()</code></li>\n<li><code>git()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "inputmaker.call.shell", "modulename": "inputmaker.call", "qualname": "shell", "kind": "function", "doc": "<p>Run a shell <code>command</code>, inside an optional <code>cwd</code> directory.\nIf empty, the current working directory will be used.\nReturns the result of the command used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span>, </span><span class=\"param\"><span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.call.git", "modulename": "inputmaker.call", "qualname": "git", "kind": "function", "doc": "<p>Update</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.castep", "modulename": "inputmaker.castep", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This module is supposed to handle the creation of CASTEP input files.\nStill under heavy development.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>castep()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "inputmaker.castep.castep", "modulename": "inputmaker.castep", "qualname": "castep", "kind": "function", "doc": "<p>Create CASTEP input files from CIF files.\nThis function is still under heavy development.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">supercell</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">custom_out_folder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">move_to_subfolders</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.common", "modulename": "inputmaker.common", "kind": "module", "doc": "<p>Common functions and definitions.</p>\n\n<hr />\n"}, {"fullname": "inputmaker.common.version", "modulename": "inputmaker.common", "qualname": "version", "kind": "variable", "doc": "<p>Package version, using semantic versioning to indicate breaking changes, as in v<MAJOR>.<MINOR>.<PATCH>.</p>\n", "default_value": "&#x27;v0.7.0&#x27;"}, {"fullname": "inputmaker.common.welcome", "modulename": "inputmaker.common", "qualname": "welcome", "kind": "function", "doc": "<p>Returns the welcome message as a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">submodule_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.cp2k", "modulename": "inputmaker.cp2k", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>This submodule handles the creation of CP2K input files.\nStill under heavy development.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>cp2k()</code></li>\n<li><code>get_cell()</code></li>\n<li><code>get_cell_from_inp()</code></li>\n<li><code>get_cell_from_ase()</code></li>\n<li><code>get_coords()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "inputmaker.cp2k.cp2k", "modulename": "inputmaker.cp2k", "qualname": "cp2k", "kind": "function", "doc": "<p>Create CP2K input files from a template.\nThis function is still under heavy development.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.cp2k.get_cell", "modulename": "inputmaker.cp2k", "qualname": "get_cell", "kind": "function", "doc": "<p>Returns a string with the proper cell parameters from <code>structure_file</code>,\nformatted to be included in a CP2K input file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">structure_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.cp2k.get_cell_from_inp", "modulename": "inputmaker.cp2k", "qualname": "get_cell_from_inp", "kind": "function", "doc": "<p>Returns the cell parameters from a previous CP2K <code>inp_file</code> input file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inp_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.cp2k.get_cell_from_ase", "modulename": "inputmaker.cp2k", "qualname": "get_cell_from_ase", "kind": "function", "doc": "<p>Returns the cell parameters from a given <code>structure_file</code> using ASE,</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">structure_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.cp2k.get_coords", "modulename": "inputmaker.cp2k", "qualname": "get_coords", "kind": "function", "doc": "<p>Returns a list of strings with the atomic positions from <code>structure_file</code>,\nready to be used in a CP2K input file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">structure_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools", "modulename": "inputmaker.tools", "kind": "module", "doc": "<h1 id=\"description\">Description</h1>\n\n<p>Common functions to manipulate input files with custom keywords.</p>\n\n<h1 id=\"index\">Index</h1>\n\n<ul>\n<li><code>get_file()</code></li>\n<li><code>get_files_from_folder()</code></li>\n<li><code>get_file_from_folder()</code></li>\n<li><code>rename_files()</code></li>\n<li><code>rename_files_on_subfolders()</code></li>\n<li><code>copy_files_to_subfolders()</code></li>\n<li><code>copy_file()</code></li>\n<li><code>template_to_file()</code></li>\n<li><code>replace_str_on_keyword()</code></li>\n<li><code>replace_line_with_keyword()</code></li>\n<li><code>insert_text_under_keyword()</code></li>\n<li><code>replace_text_under_keyword()</code></li>\n<li><code>delete_text_under_keyword()</code></li>\n<li><code>replace_text_between_keywords()</code></li>\n<li><code>delete_text_between_keywords()</code></li>\n<li><code>correct_file_with_dict()</code></li>\n</ul>\n\n<hr />\n"}, {"fullname": "inputmaker.tools.get_file", "modulename": "inputmaker.tools", "qualname": "get_file", "kind": "function", "doc": "<p>Check if the given <code>file</code> exists, and returns its full path.\nIf the file does not exist in the provided path,\nit will check in the current working directory.\nIf the file is still missing, it raises an error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.get_files_from_folder", "modulename": "inputmaker.tools", "qualname": "get_files_from_folder", "kind": "function", "doc": "<p>Returns a list with the files in a given <code>folder</code>.\nIf the folder does not exist in the given path,\nit checks in the current working directory.\nIf the folder is still missing, it raises an error.</p>\n\n<p>If <code>extensions</code> is provided, it returns only the files\nwith the specified extension/s (string or list with strings).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.get_file_from_folder", "modulename": "inputmaker.tools", "qualname": "get_file_from_folder", "kind": "function", "doc": "<p>Returns the first file with the given <code>extension</code> (str or list of strings)\nin the given <code>folder</code>.\nIf <code>preferred_file</code> is provided and found, it will return that file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">preferred_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.rename_files", "modulename": "inputmaker.tools", "qualname": "rename_files", "kind": "function", "doc": "<p>Renames files in the current working directory,\nreplacing the <code>old_string</code> by the <code>new_string</code>.\nIf <code>folder</code> is empty, the current working directory is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.rename_files_on_subfolders", "modulename": "inputmaker.tools", "qualname": "rename_files_on_subfolders", "kind": "function", "doc": "<p>Renames the files inside the subfolders in the current working directory,\nfrom an <code>old_extension</code> to the <code>new_extension</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old_extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.copy_files_to_subfolders", "modulename": "inputmaker.tools", "qualname": "copy_files_to_subfolders", "kind": "function", "doc": "<p>Copies the files with the given <code>extension</code> to individual subfolders.\nThe subfolders are named as the original files,\nremoving the strings from the <code>strings_to_delete</code> list.\nRuns in the current working directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">strings_to_delete</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.copy_file", "modulename": "inputmaker.tools", "qualname": "copy_file", "kind": "function", "doc": "<p>Copies the content of <code>original_file</code> to <code>new_file</code>.\nUsed to create a new file from a template.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">original_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.template_to_file", "modulename": "inputmaker.tools", "qualname": "template_to_file", "kind": "function", "doc": "<p>Same as <code>copy_file</code>, but adds a <code>comment</code>\nat the beginning of the new file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.replace_str_on_keyword", "modulename": "inputmaker.tools", "qualname": "replace_str_on_keyword", "kind": "function", "doc": "<p>Replaces the <code>keyword</code> string with the <code>text</code> string in the given <code>filename</code>.\nIf <code>only_first=True</code>, it will only work\nat the first instance of the keyword, ignoring the rest.\nThe keyword can be at any position in the line, not just at the beginning.</p>\n\n<pre><code>line... keyword ...line -&gt; line... text ...line\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">only_first</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.replace_line_with_keyword", "modulename": "inputmaker.tools", "qualname": "replace_line_with_keyword", "kind": "function", "doc": "<p>Replaces the full line containing the <code>keyword</code> string\nwith the <code>text</code> string in the given <code>file</code>.\nIf <code>only_first=True</code>, it will only work\nat the first instance of the keyword, ignoring the rest.\nThe keyword can be at any position in the line, not just at the beginning.</p>\n\n<pre><code>line1\nkeyword line2 -&gt; text\nline3\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">only_first</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.insert_text_under_keyword", "modulename": "inputmaker.tools", "qualname": "insert_text_under_keyword", "kind": "function", "doc": "<p>Inserts the given <code>text</code> string under the first occurrence\nof the <code>keyword</code> in the given <code>file</code>.\nThe keyword can be at any position within the line.\nIf <code>only_first=True</code>, it will only work\nat the first instance of the keyword, ignoring the rest.\nThe keyword can be at any position in the line, not just at the beginning.</p>\n\n<pre><code>line1\nkeyword line2\ntext\nline3\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">only_first</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.replace_text_under_keyword", "modulename": "inputmaker.tools", "qualname": "replace_text_under_keyword", "kind": "function", "doc": "<p>Replaces the lines under the first occurrence of the <code>keyword</code>\nin the given <code>filename</code> with the given <code>text</code> string.</p>\n\n<blockquote>\n  <p>TO-DO: IN THE FUTURE SHOULD BE POSITION-AGNOSTIC. The keyword currently must be at the beginning.</p>\n</blockquote>\n\n<pre><code>line1\nkeyword line2\ntext\nline4\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.delete_text_under_keyword", "modulename": "inputmaker.tools", "qualname": "delete_text_under_keyword", "kind": "function", "doc": "<p>Deletes the lines under the first occurrence of the <code>keyword</code> in the given <code>file</code>.</p>\n\n<blockquote>\n  <p>TO-DO: IN THE FUTURE SHOULD BE POSITION-AGNOSTIC</p>\n</blockquote>\n\n<pre><code>lines...\nkeyword\n(end of file)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">keyword</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.replace_text_between_keywords", "modulename": "inputmaker.tools", "qualname": "replace_text_between_keywords", "kind": "function", "doc": "<p>Replace lines with a given <code>text</code>, between the keywords <code>key1</code> and <code>key2</code>,\nin a given <code>file</code>.</p>\n\n<pre><code>lines...\nkey1\ntext\nkey2\nlines...\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.delete_text_between_keywords", "modulename": "inputmaker.tools", "qualname": "delete_text_between_keywords", "kind": "function", "doc": "<p>Deletes the lines between two keywords in a given <code>file</code>.</p>\n\n<pre><code>lines...\nkey1\n(lines to be deleted)\nkey2\nlines...\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inputmaker.tools.correct_file_with_dict", "modulename": "inputmaker.tools", "qualname": "correct_file_with_dict", "kind": "function", "doc": "<p>Corrects the given <code>file</code> using the <code>fixing_dict</code> dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fixing_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();